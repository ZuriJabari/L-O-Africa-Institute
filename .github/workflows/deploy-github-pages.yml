name: 🚀 Deploy to GitHub Pages + cPanel Sync

on:
  # Trigger on push to main branch
  push:
    branches: [ main ]
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Webhook trigger from external sources (like Prismic)
  repository_dispatch:
    types: [prismic-update]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    name: 🏗️ Build Gatsby Site
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚚 Get latest code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build Gatsby site
      run: npm run build -- --prefix-paths
      env:
        NODE_ENV: production
        
    - name: 📦 Create deployment package
      run: |
        cd public
        zip -r ../leo-africa-site.zip . -x "*.git*" "*node_modules*" "*.DS_Store" "*Thumbs.db"
        ls -la ../leo-africa-site.zip
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: leo-africa-deployment-package
        path: |
          leo-africa-site.zip
          public/
        retention-days: 7
        
    - name: 📋 Setup Pages
      uses: actions/configure-pages@v4
      with:
        static_site_generator: gatsby
        enablement: true
        
    - name: 📤 Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

  deploy-pages:
    name: 🌐 Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  sync-to-cpanel:
    name: 📂 Sync to cPanel
    runs-on: ubuntu-latest
    needs: [build, deploy-pages]
    if: always()
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: leo-africa-deployment-package
        
    - name: 📂 Deploy via cURL/wget (Method 1)
      continue-on-error: true
      id: curl_deploy
      run: |
        echo "🔄 Attempting deployment via cURL..."
        # Create a simple PHP upload script endpoint (if available)
        if curl -f -X POST \
          -F "file=@leo-africa-site.zip" \
          -F "extract=true" \
          -u "${{ secrets.FTP_USERNAME }}:${{ secrets.FTP_PASSWORD }}" \
          "https://${{ secrets.FTP_SERVER }}/deploy-endpoint.php" 2>/dev/null; then
          echo "✅ cURL deployment successful"
          exit 0
        else
          echo "❌ cURL deployment failed or not available"
          exit 1
        fi
        
    - name: 📂 Deploy via rsync over SSH (Method 2)
      if: steps.curl_deploy.outcome == 'failure'
      continue-on-error: true
      id: rsync_deploy
      run: |
        echo "🔄 Attempting deployment via rsync..."
        # Install rsync and sshpass
        sudo apt-get update
        sudo apt-get install -y rsync sshpass
        
        # Extract files (overwrite without prompting)
        unzip -o -q leo-africa-site.zip -d ./site-files/
        
        # Try rsync over SSH (if SSH is available)
        if sshpass -p "${{ secrets.FTP_PASSWORD }}" \
          rsync -avz --timeout=30 \
          -e "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30" \
          ./site-files/ \
          "${{ secrets.FTP_USERNAME }}@${{ secrets.FTP_SERVER }}:public_html/" 2>/dev/null; then
          echo "✅ rsync deployment successful"
          exit 0
        else
          echo "❌ rsync deployment failed or SSH not available"
          exit 1
        fi
        
    - name: 📂 Deploy via Python FTP (Method 3)
      if: steps.curl_deploy.outcome == 'failure' && steps.rsync_deploy.outcome == 'failure'
      continue-on-error: true
      id: python_ftp_deploy
      run: |
        echo "🔄 Attempting deployment via Python FTP..."
        
        # Extract files (overwrite without prompting)
        unzip -o -q leo-africa-site.zip -d ./site-files/
        
        # Create Python FTP upload script
        cat > ftp_upload.py << 'EOF'
        import ftplib
        import os
        import sys
        from pathlib import Path
        
        def upload_directory(ftp, local_dir, remote_dir=""):
            try:
                if remote_dir:
                    try:
                        ftp.cwd(remote_dir)
                    except:
                        ftp.mkd(remote_dir)
                        ftp.cwd(remote_dir)
                
                for item in os.listdir(local_dir):
                    local_path = os.path.join(local_dir, item)
                    if os.path.isfile(local_path):
                        print(f"Uploading {item}...")
                        with open(local_path, 'rb') as f:
                            ftp.storbinary(f'STOR {item}', f)
                    elif os.path.isdir(local_path):
                        print(f"Creating directory {item}...")
                        try:
                            ftp.mkd(item)
                        except:
                            pass
                        ftp.cwd(item)
                        upload_directory(ftp, local_path)
                        ftp.cwd('..')
                return True
            except Exception as e:
                print(f"Upload error: {e}")
                return False
        
        # Connect and upload
        try:
            ftp = ftplib.FTP()
            ftp.set_pasv(False)  # Use active mode
            ftp.connect(sys.argv[1], 21, timeout=60)
            ftp.login(sys.argv[2], sys.argv[3])
            ftp.cwd('public_html')
            
            success = upload_directory(ftp, './site-files')
            ftp.quit()
            
            if success:
                print("✅ Python FTP deployment successful")
                sys.exit(0)
            else:
                print("❌ Python FTP deployment failed")
                sys.exit(1)
                
        except Exception as e:
            print(f"❌ Python FTP connection failed: {e}")
            sys.exit(1)
        EOF
        
        # Run Python FTP upload
        python3 ftp_upload.py "${{ secrets.FTP_SERVER }}" "${{ secrets.FTP_USERNAME }}" "${{ secrets.FTP_PASSWORD }}"
        
    - name: ✅ Deployment Status Summary
      if: always()
      run: |
        echo "📊 Deployment Status Summary:"
        echo "================================"
        echo "🌐 GitHub Pages: ✅ Success"
        
        if [ "${{ steps.curl_deploy.outcome }}" = "success" ]; then
          echo "📂 cPanel (cURL): ✅ Success"
        elif [ "${{ steps.rsync_deploy.outcome }}" = "success" ]; then
          echo "📂 cPanel (rsync): ✅ Success"  
        elif [ "${{ steps.python_ftp_deploy.outcome }}" = "success" ]; then
          echo "📂 cPanel (Python FTP): ✅ Success"
        else
          echo "📂 cPanel: ❌ All methods failed"
          echo ""
          echo "📦 Manual deployment package available:"
          echo "1. Download 'leo-africa-deployment-package' artifact"
          echo "2. Extract leo-africa-site.zip"
          echo "3. Upload contents to cPanel File Manager → public_html/"
          echo ""
          echo "🌐 Site is live on GitHub Pages as backup"
        fi
